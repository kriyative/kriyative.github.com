<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<rss version="2.0"><channel><title>macros posts from kriyative</title><link>http://kriyative.github.com</link><description></description><item><title>A lightweight `bind&apos; macro</title><link>http://kriyative.github.com/2009/12/29/a-lightweight-bind-macro/</link><description>&lt;p&gt;
In my recent work I found myself writing a lot of code that looked
like the following:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
(destructuring-bind (x y)
    point
  (destructuring-bind (x1 y1 w h)
      frame
    (let ((x2 (+ x1 w))
          (y2 (+ y1 h)))
      (and (&amp;gt;= x x1) (&amp;lt;= x x2) (&amp;gt;= y y1) (&amp;lt;= y y2)))))
&lt;/pre&gt;

&lt;p&gt;
The above example is a bit contrived, for effect, but hopefully
conveys the general idea.
&lt;/p&gt;

&lt;p&gt;
What I wanted was a Clojure style `let&apos; which could destructure
inline. There was one Common Lisp implementation
(&lt;a href=&quot;http://common-lisp.net/project/metabang-bind/&quot;&gt;http://common-lisp.net/project/metabang-bind/&lt;/a&gt;), which had some nice
features, but it was bit much for my needs. So I came up with my own
lightweight &lt;code&gt;bind&lt;/code&gt; macro (see below), which lets me rewrite the above
example as:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
(bind (((x y) point)
       ((x1 y1 w h) frame)
       (x2 (+ x1 w))
       (y2 (+ y1 h)))
  (and (&amp;gt;= x x1) (&amp;lt;= x x2) (&amp;gt;= y y1) (&amp;lt;= y y2)))
&lt;/pre&gt;

&lt;p&gt;
Way better, IMHO.
&lt;/p&gt;

&lt;p&gt;
Oh, here&apos;s the `bind&apos; macro in its entirety:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
(defmacro bind (clauses &amp;amp;body body)
  &quot;This macro combines the behaviour of the forms `let*&apos;, `destructuring-bind&apos;,
and `multiple-value-bind&apos;, permitting the following style of binding form:
 
  (bind (((:values m n) (values 10 20))
         ((a b &amp;amp;key (c 10)) &apos;(1 2))
         (x 5))
    (+ x a b c m n))
  =&amp;gt; 48
 
This is a more limited and lightweight implementation of some ideas from
metabang-bind (http://common-lisp.net/project/metabang-bind/).&quot;
  (cond
    ((null clauses) `(progn ,@body))
    ((and (listp (caar clauses)) (eq (caaar clauses) :values))
     `(multiple-value-bind ,(cdaar clauses)
          ,@(cdar clauses)
        (bind ,(cdr clauses) ,@body)))
    ((listp (caar clauses))
     `(destructuring-bind ,(caar clauses)
          ,@(cdar clauses)
        (bind ,(cdr clauses) ,@body)))
    (t
     `(let (,(car clauses))
        (bind ,(cdr clauses) ,@body)))))
&lt;/pre&gt;
</description></item><item><title>keyword args in clojure</title><link>http://kriyative.github.com/2009/05/06/keyword-args-in-clojure/</link><description>&lt;p&gt;
I like the keyword args support in Common Lisp. So, when I learned
that clojure didn&apos;t support keyword args in the base language, I was a
bit disappointed. But, with clojure&apos;s support for destructuring and
macros, it should be easy to build keyword args &amp;#x2026; right?
&lt;/p&gt;

&lt;p&gt;
Rich Hickey posted a simple example on the clojure mailing list, which
I adapted slightly to my taste:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
(defmacro defun [sym args &amp;amp; body]
  (let [[pargs [_ &amp;amp; kargs]] (split-with (fn [x] (not (= x &apos;&amp;amp;key))) args)
        gkeys (gensym &quot;gkeys__&quot;)
        letk (fn [k]
               (let [[nm val] (if (vector? k) k [k])
                     kname (keyword (name nm))]
                 `(~nm (or (~gkeys ~kname) ~val))))]
    `(defn ~sym [~@pargs &amp;amp; k#]
       (let [~gkeys (apply hash-map k#)
             ~@(apply concat (map letk kargs))]
         ~@body))))
&lt;/pre&gt;

&lt;p&gt;
After which:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
(defun foo [a b &amp;amp;key c [d 5]]
  [a b c d])

user&amp;gt; (foo 1 2 :c 10)
[1 2 10 5]
&lt;/pre&gt;

&lt;p&gt;
Joy.
&lt;/p&gt;
</description></item></channel></rss>