<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<rss version="2.0"><channel><title>aws posts from kriyative</title><link>http://kriyative.github.com</link><description></description><item><title>cynojure.aws -- amazon web services from clojure</title><link>http://kriyative.github.com/2009/06/11/cynojure-aws/</link><description>&lt;p&gt;
I&apos;ve been using Amazon EC2, S3, and SQS services in various projects
at work. For one project, I needed to build a little tool that
integrated SQS and S3 services, and I decided to build it in
Clojure. In the course of building the tool, I learned a bit about the
various open source Java libraries for working with Amazon AWS, and
the issues with integrating them with Clojure.
&lt;/p&gt;

&lt;p&gt;
The libraries I used are:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://jets3t.dev.java.net/&quot;&gt;jets3t&lt;/a&gt; &amp;#x2013; S3 interface
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code.google.com/p/typica/&quot;&gt;typica&lt;/a&gt; &amp;#x2013; SQS and EC2 interface
&lt;/li&gt;
&lt;li&gt;Apache &lt;a href=&quot;http://hc.apache.org/httpclient-3.x/&quot;&gt;commons-httpclient&lt;/a&gt; and associated dependencies
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jdbc.postgresql.org/&quot;&gt;postgres jdbc driver&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Having been away from Java development for some time now, I&apos;d
forgotten about the convoluted mess of Classpaths and Class loaders. I
had a &quot;crash&quot; refresher course in the last week. And, it&apos;s all still a
bloody mess. I did come across one-jar, which made it pretty easy to
package up the various jar dependencies into a single deliverable jar
file.
&lt;/p&gt;

&lt;p&gt;
In the end, the tool worked out well and served its purpose. Plus, it
was rewarding to be able to write code like this:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
(defun process-loop [:key
                     aws-access-key
                     aws-secret-key
                     geo-db-path
                     [message-count 5]
                     [sleep 5000]
                     sqs-queue]
  (with-geo-service (geo-get-service :path geo-db-path)
    (with-sqs-queue (sqs-get-queue aws-access-key aws-secret-key sqs-queue)
      (with-connection *db*
        (let [process (fn [msgs]
                        (if (empty? msgs)
                          (Thread/sleep sleep)
                          (try
                            (transaction
                             (doseq [msg msgs] (process-message msg)))
                            (doseq [msg msgs] (sqs-delete-message msg))
                            (catch java.sql.BatchUpdateException ex
                              (println &quot;* process error:&quot;
                                       (.getNextException ex))))))]
          (while true
            (try
              (process (sqs-receive-messages message-count))
              (catch Exception ex
                (println &quot;* error:&quot; ex)))))))))
&lt;/pre&gt;

&lt;p&gt;
and know it&apos;s running on the JVM.
&lt;/p&gt;

&lt;p&gt;
I&apos;ve committed some of the code for the Amazon integration into the
cynojure git repository, in case anyone else finds it useful.
&lt;/p&gt;

&lt;p&gt;
Harmony.
&lt;/p&gt;
</description></item></channel></rss>