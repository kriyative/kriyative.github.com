<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<rss version="2.0"><channel><title>emacs posts from kriyative</title><link>http://kriyative.github.com</link><description></description><item><title> clojure-mode and slime</title><link>http://kriyative.github.com/2013/03/03/clojure-mode-and-slime/</link><description>
&lt;p&gt;As a long time user of &lt;a href=&quot;http://common-lisp.net/project/slime/&quot;&gt;SLIME&lt;/a&gt; I was a bit disappointed to see
clojure-mode 2.0 drop support for it in favor of &lt;code&gt;nrepl&lt;/code&gt;. I looked
into &lt;code&gt;nrepl&lt;/code&gt; but found it to be not as feature complete as SLIME, at
present. Also, I still work on some sizeable Common Lisp code, which
relies entirely on SLIME, and I want to be able leverage any tooling
work I do across all my projects &amp;ndash; so SLIME wins.
&lt;/p&gt;
&lt;p&gt;
As it turns out, it wasn't at all difficult to resurrect the SLIME
integration code from clojure-mode 1.x and load it alongside the newer
clojure-mode.
&lt;/p&gt;
&lt;p&gt;
I've committed the &lt;code&gt;clojure-mode-slime.el&lt;/code&gt; Emacs Lisp code into the
following repo, along with some other Clojure/Emacs hacks:
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&quot;http://github.com/kriyative/clojure-emacs-hacks&quot;&gt;http://github.com/kriyative/clojure-emacs-hacks&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I hope this is useful to other SLIME die-hards in the Clojure
community as well.  Feedback and bug reports are most welcome.
&lt;/p&gt;</description></item><item><title> clojure, emacs, and docs redux</title><link>http://kriyative.github.com/2013/03/02/clojure-emacs-docs-redux/</link><description>
&lt;p&gt;A while back I'd &lt;a href=&quot;http:/2009/06/21/clojure-emacs-and-javadocs/&quot;&gt;written&lt;/a&gt; about looking up Javadocs from Clojure mode
buffers. I got some good feedback on that post, so I thought I'd try
and expand on that and see if I could integrate other Clojure
documentation sources into a similar workflow.
&lt;/p&gt;
&lt;p&gt;
&lt;a name=&quot;w3m-javadoc-screenshot&quot; id=&quot;w3m-javadoc-screenshot&quot;&gt;&lt;/a&gt;
&lt;div class=&quot;figure&quot;&gt;
  &lt;a href=&quot;/assets/2013/03/02/w3m-javadoc.jpg&quot;&gt;
    &lt;img src=&quot;/assets/2013/03/02/w3m-javadoc.jpg&quot; width=&quot;400&quot;/&gt;
  &lt;/a&gt;
  &lt;h1&gt;view javadocs in emacs/w3m (click to view full size)&lt;/h1&gt;
&lt;/div&gt;

Looking up Clojure doc strings within Emacs is really easy. In any
Clojure code buffer, you can place your cursor at a symbol and use
&lt;code&gt;C-c C-d d&lt;/code&gt; or &lt;code&gt;M-x slime-describe-symbol&lt;/code&gt; to bring up the function or
var doc string.
&lt;/p&gt;
&lt;p&gt;
Previously, I'd made a &lt;code&gt;slime-javadoc&lt;/code&gt; command that could be
configured to search external Javadoc sources only. However, that
mechanism could be applied more generally to more sources.
&lt;/p&gt;
&lt;p&gt;
The new command &lt;code&gt;M-x clojuredocs&lt;/code&gt;, can show either Javadocs for Java
classes, or goes to the excellent &lt;a href=&quot;http://clojuredocs.org&quot;&gt;clojuredocs.org&lt;/a&gt; site for
documentation specific to &lt;code&gt;clojure.core&lt;/code&gt; and a few other namespaces
(such as &lt;code&gt;ring&lt;/code&gt;), or eventually fallsback to a simple Google search.
&lt;/p&gt;
&lt;p&gt;
So, after connecting to a Clojure instance (via &lt;code&gt;clojure-jack-in&lt;/code&gt; or
&lt;code&gt;slime-connect&lt;/code&gt;), I can invoke &lt;code&gt;M-x clojuredocs&lt;/code&gt; on any symbol and get
back some relevant documentation or at the least som helpful pointers
from Google.
&lt;/p&gt;
&lt;p&gt;
I've committed an initial version of the Emacs Lisp code into the
following github repo:
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&quot;http://github.com/kriyative/clojure-emacs-hacks&quot;&gt;http://github.com/kriyative/clojure-emacs-hacks&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Feedback and bug reports are most welcome.
&lt;/p&gt;</description></item><item><title>Emacs for Clojure - Part 2</title><link>http://kriyative.github.com/2012/07/28/emacs-for-clojure-2/</link><description>
&lt;p&gt;This is the second in a two part post about a Clojure programmer
workflow entirely within Emacs.
&lt;/p&gt;

&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Editing Clojure&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
Some useful navigation key bindings in Clojure-mode, actually any Lisp
code editing mode in Emacs, are as follows:
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption&gt;&lt;/caption&gt;
&lt;colgroup&gt;&lt;col class=&quot;left&quot; /&gt;&lt;col class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Keybinding&lt;/th&gt;&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Command&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-M-f&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;forward-sexp&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-M-b&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;backward-sexp&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-M-a&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;beginning-of-defun&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-M-e&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;end-of-defun&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-M-x&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;slime-compile-defun&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-x C-e&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;slime-eval-last-expression&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
Some of these key bindings get redefined when a buffer is in
&lt;code&gt;slime-mode&lt;/code&gt; to SLIME enhanced equivalents, but mostly they behave the
same.
&lt;/p&gt;
&lt;p&gt;
And, don't forget the exponential effect of the &lt;code&gt;C-u&lt;/code&gt; prefix key.
&lt;/p&gt;
&lt;p&gt;
Some other key bindings that are also useful are:
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption&gt;&lt;/caption&gt;
&lt;colgroup&gt;&lt;col class=&quot;left&quot; /&gt;&lt;col class=&quot;left&quot; /&gt;&lt;col class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Keybinding&lt;/th&gt;&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Command&lt;/th&gt;&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Doc&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-M-q&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;indent-sexp&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;A lot of times when copying and pasting or otherwise modifying large blocks of s-expressions, the indentation of the code can get out of whack. &lt;code&gt;indent-sexp&lt;/code&gt; can help restore the balance.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-M-h&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;mark-defun&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-M-k&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;kill-sexp&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
Also worth knowing, the magic of &lt;i&gt;dynamic abbrevs&lt;/i&gt; bound to the
&lt;code&gt;M-/&lt;/code&gt; key binding. Dynamic abbrevs are a quick way to
complete a long function or var name from a minimal prefix. It's very
brute force (i.e, just searches for a match in all the open buffers),
but since it's very fast, it comes in handy when you're working with
partially evaluated Clojure code.
&lt;/p&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Clojure REPL&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
Everything begins with a Clojure instance which has SWANK loaded.
Again, there are lots of ways of starting one of these, and the most
common use case is with a &lt;a href=&quot;https://github.com/technomancy/leiningen/&quot;&gt;Leiningen&lt;/a&gt; project setup. Setting up
Leiningen is beyond the scope of this post, but the docs on
Leiningen's github page are quite helpful in getting you started.
&lt;/p&gt;
&lt;p&gt;
Once Leiningen is setup and you have a &lt;code&gt;project.clj&lt;/code&gt; file for your
project, you can invoke &lt;code&gt;clojure-jack-in&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
Once SLIME is connected, it's helpful to know the following commands:
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption&gt;&lt;/caption&gt;
&lt;colgroup&gt;&lt;col class=&quot;left&quot; /&gt;&lt;col class=&quot;left&quot; /&gt;&lt;col class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Keybinding&lt;/th&gt;&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Command&lt;/th&gt;&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Doc&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;slime-repl&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;This is a quick way to jump to the &lt;code&gt;*slime-repl clojure*&lt;/code&gt; buffer.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;slime-reset&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;When your SLIME connection goes out of whack.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-M-i&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;slime-complete-symbol&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-x e&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;slime-eval-last-expression&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;Makes every Clojure buffer into a REPL. Plus, it is very handy when iterating on tests.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-c C-c&lt;/code&gt;, &lt;code&gt;C-M-x&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;slime-compile-defun&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;This is convenient for compiling a &lt;code&gt;defn&lt;/code&gt; or other top-level form, without having to put the cursor at the end of the expression.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;slime-list-connections&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;If you find yourself having to connect to multiple SWANK servers this command is helpful in switching between them.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;slime-list-threads&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;Show the list of scheduled JVM threads, and can provides an interactive way to kill running threads. Use with caution.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;/div&gt;
&lt;/div&gt;
</description></item><item><title>Emacs for Clojure - Part 1</title><link>http://kriyative.github.com/2012/07/21/emacs-for-clojure-1/</link><description>
&lt;p&gt;This is a brief overview of the way I work in Clojure using Emacs -
almost exclusively. Obviously, Emacs is not the only way to interact
with Clojure, but it can be a pretty seamless and efficient
environment for Clojure, once you become familiar with the powerful
extensibility and &quot;mouse-free&quot; efficiency of Emacs.
&lt;/p&gt;
&lt;p&gt;
Also, since Emacs uses Lisp as its extension language, there's a lot
of value for a Clojure/Lisp developer in learning and mastering the
Emacs' ecosystem. I hope this series of posts will be helpful in that
endeavour.
&lt;/p&gt;
&lt;p&gt;
There are lots of &quot;getting started with Emacs&quot; docs available online
and on the web. The easiest one is the built-in &lt;a href=&quot;http://git.savannah.gnu.org/cgit/emacs.git/plain/etc/tutorials/TUTORIAL?h=emacs-24&quot;&gt;Tutorial&lt;/a&gt;, which you
can also bring up within Emacs with &lt;code&gt;C-h t&lt;/code&gt; or &lt;code&gt;M-x help-with-tutorial&lt;/code&gt;.  Other online references:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gnu.org/software/emacs/tour/&quot;&gt;A Guided Tour of Emacs&lt;/a&gt;

&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www2.lib.uchicago.edu/keith/tcl-course/emacs-tutorial.html&quot;&gt;A Tutorial Introduction to GNU Emacs&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;
For the most part, I'm going to assume you're using Emacs default key
bindings, but the following customizations don't really depend on
that.
&lt;/p&gt;

&lt;div id=&quot;outline-container-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Process&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;


&lt;p&gt;
My typical work-flow involves the following steps (but not necessarily
in the same order always):
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
(loop []
  ;; Edit code/tests
  ;; Interactive development with REPL and tests
  ;; Look up documentation
  ;; Search and Navigate a code tree
  ;; Run batch tests
  ;; Merge commits and resolve conflicts in Git
  (recur))
&lt;/pre&gt;


&lt;p&gt;
I'll try to cover each of these steps in detail over the course of the
next few posts.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Clojure Mode Setup&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;


&lt;p&gt;
Like snowflakes and Sting albums, there are myriad ways of setting up
the Clojure environment in Emacs, but essentially all of them should
be doing something similar to the following:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
(defun clojure-mode-hook ()
  (setq indent-tabs-mode nil
        clojure-mode-use-backtracking-indent t)
  (setup-clojure-indentation-rules))
(require 'clojure-mode)
(require 'clojure-test-mode)
(require 'swank-clojure)
(add-hook 'clojure-mode-hook 'clojure-mode-hook)
(add-hook 'clojure-mode-hook 'clojure-test-mode)
&lt;/pre&gt;


&lt;p&gt;
If you are using Emacs 24 and have never setup Clojure-mode or SLIME
before, check out the &lt;a href=&quot;https://github.com/technomancy/emacs-starter-kit&quot;&gt;emacs-starter-kit&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Basic Editing&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;


&lt;p&gt;
It's good to get familiar with the basic cursor movement keys such as:
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption&gt;&lt;/caption&gt;
&lt;colgroup&gt;&lt;col class=&quot;left&quot; /&gt;&lt;col class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Keybinding&lt;/th&gt;&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Command&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-n&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;next-line&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-p&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;previous-line&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-f&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;forward-char&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-b&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;backward-char&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-a&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;move-beginning-of-line&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-e&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;move-end-of-line&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
There's been a lot of cursing and teeth gnashing about Emacs' default
key bindings, but here are some of the benefits that I've come to
appreciate over time:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clustering &amp;ndash; you can insert and move around with minimal physical
   movement from the &lt;i&gt;home row&lt;/i&gt; of the keyboard.

&lt;/li&gt;
&lt;li&gt;Easy to remember

&lt;/li&gt;
&lt;li&gt;Work in &lt;code&gt;bash&lt;/code&gt; and even on tty devices (never say never) - this is
   particularly useful if you're planning to do some remote pairing
   over &lt;code&gt;tmux&lt;/code&gt; or &lt;code&gt;screen&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;
And, there is always &lt;code&gt;C-h b&lt;/code&gt; &lt;code&gt;describe-bindings&lt;/code&gt; which will list the
key bindings in any given buffer.
&lt;/p&gt;
&lt;p&gt;
Other useful basic key bindings:
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption&gt;&lt;/caption&gt;
&lt;colgroup&gt;&lt;col class=&quot;left&quot; /&gt;&lt;col class=&quot;left&quot; /&gt;&lt;col class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Keybinding&lt;/th&gt;&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Command&lt;/th&gt;&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;Doc&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-l&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;recenter&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;redraw buffer with the current line at the vertical center of the window; one useful variation is to &lt;code&gt;C-u 0 C-l&lt;/code&gt; which will redraw the buffer with the current line at the top of the window&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-SPC&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;set-mark-command&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;set the beginning of a copy/cut region, and move the cursor to the end of the region&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-w&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;kill-region&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;cut the contents of the selected region&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;M-w&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;kill-ring-save&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;copy (not cut) the contents of the selected region&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-y&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;yank&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;paste the most recently copied/cut region at cursor point&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;M-y&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;yank-pop&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;when used after a &lt;code&gt;yank&lt;/code&gt;, Emacs will replace the pasted region with older copied text cycling through the cut/copy history&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-x r k&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;kill-rectangle&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;mark a region as you would normally, but cut a rectangular sub-region. Useful when working with columns of data&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;C-x r y&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;&lt;code&gt;yank-rectangle&lt;/code&gt;&lt;/td&gt;&lt;td class=&quot;left&quot;&gt;paste the most recently killed rectangular region&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id=&quot;outline-container-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Keyboard Macros&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;


&lt;p&gt;
We've all been in situations where we've had to fix up some literal
data structure or otherwise munge code by repeating a set of editing
keystrokes, either deleting, inserting or otherwise splicing
text. Keyboard macros can quickly help automate some of this work.
&lt;/p&gt;
&lt;p&gt;
The basic principle is that you begin recording a macro &lt;code&gt;C-x (&lt;/code&gt;
&lt;code&gt;kmacro-start-macro&lt;/code&gt;, perform the keyboard actions, and then end
recording with &lt;code&gt;C-x )&lt;/code&gt; &lt;code&gt;kmacro-end-macro&lt;/code&gt;. You can then replay the
macro using &lt;code&gt;C-x e&lt;/code&gt; &lt;code&gt;kmacro-end-and-call-macro&lt;/code&gt;. Also, check out
&lt;code&gt;C-x C-k n&lt;/code&gt; &lt;code&gt;kmacro-name-last-macro&lt;/code&gt; for oft repeated macros.
&lt;/p&gt;
&lt;p&gt;
&lt;i&gt;Next post:&lt;/i&gt; REPL, SLIME and interactive programming.
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</description></item><item><title>Displaying a daily Org-mode agenda reminder in Emacs</title><link>http://kriyative.github.com/2010/03/23/daily-org-agenda-reminder/</link><description>
&lt;p&gt;Here's a simple hack to get an Org-mode agenda view to popup in an
Emacs buffer, daily at a specified time.
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
(defvar daily-agenda-timer (parse-relative-time &quot;9:00 am&quot;))
;; (decode-time daily-agenda-timer)
 
(defun show-daily-agenda ()
  (unless (time-less-p (current-time) daily-agenda-timer)
    (setq daily-agenda-timer (time-add daily-agenda-timer
                                     (seconds-to-time 86400)))
    (org-agenda-list)))
 
(add-hook 'display-time-hook 'show-daily-agenda)
(display-time)
&lt;/pre&gt;


&lt;p&gt;
The &lt;code&gt;parse-relative-time&lt;/code&gt; function helps in initializing the
&lt;code&gt;daily-agenda-timer&lt;/code&gt; using a human readable string.
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
(defun parse-relative-time (time-str)
  (destructuring-bind (sec min hour day month year dow dst zone)
      (parse-time-string time-str)
    (destructuring-bind (sec1 min1 hour1 day1 month1 year1 dow1 dst1 zone1)
      (decode-time)
      (encode-time (or sec sec1)
                 (or min min1)
                 (or hour hour1)
                 (or day day1)
                 (or month month1)
                 (or year year1)
                 (or zone zone1)))))
&lt;/pre&gt;

</description></item><item><title>clojure, emacs, and javadocs</title><link>http://kriyative.github.com/2009/06/21/clojure-emacs-and-javadocs/</link><description>
&lt;p&gt;In the course of my recent work, integrating various java libraries
with clojure, I spent a lot of time going back and forth between emacs
and firefox, just to read java api documentation. I even tried loading
up the &quot;All Classes&quot; index from the java api docs in an emacs/w3m
buffer and isearch-ing through it. It was a far from optimal
experience, and I decided to hack something using clojure and slime.
&lt;/p&gt;
&lt;p&gt;
Bill Clementson had posted a great intro to javadoc and clojure/slime,
but I was looking for something that wouldnt' require me to leave
emacs just to read documentation, and that too java api docs.
&lt;/p&gt;
&lt;p&gt;
Ideally, I wanted to be able able to put the cursor on any java class
symbol in a clojure-mode buffer in emacs, execute &lt;code&gt;M-x slime-javadoc&lt;/code&gt;,
and have the api documentation popup in an adjacent emacs window.
&lt;/p&gt;
&lt;p&gt;
Turns out the hardest part of implementing this was in resolving an
unqualified class name to its fully qualified form, before looking up
its documentation path. For example,
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
(ns example
  (:import (java.util UUID)))

(defn uuid []  (.toString (UUID/randomUUID)))
&lt;/pre&gt;


&lt;p&gt;
Looking up the javadoc on UUID should really be on &lt;code&gt;java.util.UUID&lt;/code&gt;,
which clojure knows. So, the core of the hack is a clojure function,
which takes the symbol at point (&quot;UUID&quot; in this case), and the current
namespace (&quot;example&quot;) and returns a fully qualified class name
&quot;java.util.UUID&quot;. That function, implemented as a slime command looks
like the following:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
(swank.commands/defslimefn resolve-symbol [sym ns-name]
  (when-let [the-class (ns-resolve (find-ns (symbol ns-name))
                                   (symbol sym))]
    (.getName the-class)))
&lt;/pre&gt;


&lt;p&gt;
Now all we need is emacs to clean up the symbol at point, and call
this function via slime.
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
(defun slime-javadoc (symbol-name)
  &quot;Get JavaDoc documentation on Java class at point.&quot;
  (interactive (list (slime-read-symbol-name &quot;JavaDoc info for: &quot;)))
  (or symbol-name (error &quot;No symbol given&quot;))
  (let ((class-name (slime-eval
                     (list 'resolve-symbol
                           (first
                            (split-string (trim-trailing-dot symbol-name)
                                          &quot;/&quot;))
                           (slime-current-package)))))
    (if class-name
        (browse-url
         (concat (javadoc-root class-name)
                 (subst-char-in-string ?$
                                       ?.
                                       (subst-char-in-string ?.
                                                             ?/
                                                             class-name))
                 &quot;.html&quot;))
      (message &quot;No javadoc found for %s&quot; symbol-name))))
&lt;/pre&gt;


&lt;p&gt;
The &lt;code&gt;javadoc-root&lt;/code&gt; function is just a way to dispatch to different
javadoc paths (local or online), based on the package names. For
example, by defining:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
(setq javadoc-alist
      '((&quot;^\\(java[x]?\.\\|org\.ietf\.\\|org\.omg\.\\|org\.w3c\.\\|org\.xml\.\\)&quot; .
         &quot;file://opt/java/docs/api/&quot;)
        (&quot;^org\.jets3t&quot; . &quot;file://opt/java/jets3t-0.7.0/api-docs/&quot;)
        (&quot;^com\.xerox\.amazonws&quot; . &quot;file://opt/java/typica-1.5.2a/apidocs/&quot;)
        (&quot;^org\.mortbay&quot; . &quot;http://www.mortbay.org/apidocs/&quot;)))
&lt;/pre&gt;


&lt;p&gt;
Now, emacs/w3m will load the right documentation, based on the class
package prefix.
&lt;/p&gt;
&lt;p&gt;
The code is available on &lt;a href=&quot;http://github.com/kriyative/cynojure-swank/tree/master&quot;&gt;github&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Unity.
&lt;/p&gt;</description></item><item><title>welcome to cynojure</title><link>http://kriyative.github.com/2009/05/06/welcome/</link><description>
&lt;p&gt;Welcome to cynojure &amp;ndash; a blog about &lt;a href=&quot;http://clojure.org/&quot;&gt;clojure&lt;/a&gt; &amp;ndash; a modern &lt;a href=&quot;http://en.wikipedia.org/wiki/Lisp_(programming_language)&quot;&gt;Lisp&lt;/a&gt;
implementation.
&lt;/p&gt;
&lt;p&gt;
I've been hacking Lisp, professionally and as a hobbyist, for about
eighteen years now. Starting with &lt;a href=&quot;http://en.wikipedia.org/wiki/Emacs_Lisp&quot;&gt;elisp&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Scheme_(programming_language)&quot;&gt;Scheme&lt;/a&gt;, and then &lt;a href=&quot;http://en.wikipedia.org/wiki/Common_Lisp&quot;&gt;Common Lisp&lt;/a&gt; for the past eight years. At the risk of importing my CV into
this post, I've worked in &lt;a href=&quot;http://en.wikipedia.org/wiki/Smalltalk&quot;&gt;Smalltalk&lt;/a&gt;, Objective-C, Java; even some
Cadence SKILL. More recently, I got to work on a reasonably extensive
project in &lt;a href=&quot;http://en.wikipedia.org/wiki/Erlang_(programming_language)&quot;&gt;Erlang&lt;/a&gt;. Before you write me off as a mono-lingual snob, let
me assure you I've had a fair amount of experience with C and its
derivative family of languages as well. I just happen to be a bigger
fan of Lisp, and functional programming in general; which leads me to
clojure.
&lt;/p&gt;
&lt;p&gt;
I first heard about clojure a year back, and was very impressed with
the design motivations of its creator, Rich Hickey. A pure functional
Lisp with immutable data structures, STM, actors &amp;hellip; and, efficient
Java interop! Sounded too good, so I had to check it out. Since then,
I've been following the development of the language and its libraries,
read the &lt;a href=&quot;http://www.pragprog.com/titles/shcloj/programming-clojure&quot;&gt;Programming Clojure&lt;/a&gt; book, and played with it enough to be
somewhat productive.
&lt;/p&gt;
&lt;p&gt;
And, this week (May 4, 2009) Rich Hickey formally &lt;a href=&quot;http://groups.google.com/group/clojure/msg/bcbdad671327d2f5&quot;&gt;announced&lt;/a&gt; the
release of Clojure 1.0, which is great news. Congratulations to Rich
and all the other contributors. To mark this major milestone in
Clojure's history, and to add my own little bit to its growth, I
decided to blog about my experiences with clojure as I learn and apply
it. Hopefully, my experiences will be of some use or entertainment to
others :)
&lt;/p&gt;
&lt;p&gt;
Happy hacking.
&lt;/p&gt;
&lt;p&gt;
PS: About the name - cynojure is a play (in keeping with clojure
tradition) on the word cynosure, which according to &lt;a href=&quot;http://wordnetweb.princeton.edu/perl/webwn?s=cynosure&quot;&gt;WordNet&lt;/a&gt; has the
following meanings:
&lt;/p&gt;
&lt;blockquote&gt;

&lt;p&gt;cynosure
&lt;/p&gt;
&lt;p&gt;
something that provides guidance (as Polaris guides mariners)
&lt;/p&gt;
&lt;p&gt;
something that strongly attracts attention and admiration
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;
Perhaps a bit grandiose, but I thought it was suitable.
&lt;/p&gt;</description></item></channel></rss>