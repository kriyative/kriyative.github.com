<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<rss version="2.0"><channel><title>ecl-ios posts from kriyative</title><link>http://kriyative.github.com</link><description></description><item><title>ECL for iOS update for ECL-11.1.1, Xocde 4, and SDK 4.3</title><link>http://kriyative.github.com/2011/03/26/ecl-for-ios-updated/</link><description>
&lt;p&gt;I've committed a new branch of ECL for iOS, which now requires
ECL-11.1.1 (latest stable), and produces functioning device binaries
for armv6 and armv7 architectures using Xcode 4 and SDK 4.3. This
release has been tested on iPhone and iPad devices running iOS 4.3.1.
&lt;/p&gt;
&lt;p&gt;
Please refer to the updated README for further details.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&quot;https://github.com/kriyative/ecl-iphone-builder/tree/elf&quot;&gt;https://github.com/kriyative/ecl-iphone-builder/tree/elf&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Please note that the earlier release branch `dragon' has also been
updated to work with Xcode 4, and SDK 4.3. However, it continues to be
based on ECL-10.4.1.
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&quot;https://github.com/kriyative/ecl-iphone-builder/tree/dragon&quot;&gt;https://github.com/kriyative/ecl-iphone-builder/tree/dragon&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Many thanks to &lt;a href=&quot;http://mclide.in-progress.com/&quot;&gt;Terje Norderhaug&lt;/a&gt; for his help with this update.
&lt;/p&gt;</description></item><item><title>Lisp functions as UI callbacks in ECL/iOS</title><link>http://kriyative.github.com/2010/12/20/lisp-functions-ui-callbacks-ecl-ios/</link><description>
&lt;p&gt;There's been a bit of recent interest in building &quot;real&quot; apps using
ECL/iOS. While the `eclffi' sample code in the &lt;a href=&quot;https://github.com/kriyative/ecl-iphone-builder/tree/centaur&quot;&gt;ecl-iphone-builder&lt;/a&gt; repo
included examples of how to create/call Objective-C classes/methods
from Lisp, it was missing the glue to go the other way, which was
necessary to implement callbacks in Lisp. I've pushed an update to
github which adds this functionality.
&lt;/p&gt;
&lt;p&gt;
As an example I created a subclass of &lt;code&gt;UIButton&lt;/code&gt; called &lt;code&gt;UIButtonCB&lt;/code&gt;
with one instance var called &lt;code&gt;clickHandler&lt;/code&gt;, which can be set to a
Lisp function pointer. The &lt;code&gt;UIButtonCB&lt;/code&gt; class wires the
&lt;code&gt;UIControlEventTouchUpInside&lt;/code&gt; event to the specified handler function.
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
@implementation UIButtonCB

- (id) initWithFrame: (CGRect) aFrame
{
    [super initWithFrame: aFrame];
    clickHandler = Cnil;
    [self addTarget: self action: @selector(clicked:) forControlEvents: UIControlEventTouchUpInside];
    return self;
}

- (void) setClickHandler: (cl_object) fun
{
    register_cb(clickHandler, fun);
}

- (void) clicked: (id) sender
{
    if (Cnil != clickHandler) {
        cl_funcall(2, clickHandler, ecl_foreign_data_ref_elt(&amp;amp;sender,ECL_FFI_POINTER_VOID));
    }
}

- (void) dealloc
{
    remove_cb(clickHandler);
    clickHandler = Cnil;
    [super dealloc];
}
&lt;/pre&gt;


&lt;p&gt;
The call to &lt;code&gt;register_cb()&lt;/code&gt; ensures that the callback function is
protected from GC, and &lt;code&gt;remove_cb()&lt;/code&gt; makes the function GC'able
again. &lt;code&gt;UIButtonCB&lt;/code&gt; can now be wrapped in Lisp with the following FFI
glue:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
(defun set-click-handler (view fun)
  (when fun
    (c-fficall ((view :pointer-void)
                ((make-callback-function fun) :object))
        :void
      &quot;[#0 setClickHandler: #1];&quot;)))

(defun make-button (&amp;amp;rest init-view-args &amp;amp;key title title-color icon
                    on-click (enabled t) &amp;amp;allow-other-keys)
  (let ((view (make-view-instance &quot;UIButtonCB&quot; init-view-args)))
    (set-click-handler view on-click)
    (when icon (set-image view icon))
    (when title (set-title view title))
    (when title-color (set-title-color view title-color))
    (set-enabled view enabled)
    view))
&lt;/pre&gt;


&lt;p&gt;
Here's an example of the Lisp code to create a button with an on-click
callback, which updates a label:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
(let ((n 0)
      (label (make-label &quot;&quot; :frame '(10.0 50.0 300.0 35.0))))
  (add-subview (key-window) label)
  (add-subview (key-window)
               (make-button :frame '(140 230 40 20)
                            :title &quot;click&quot;
                            :background-color (color-argb 1 0.5 0.5 0.5)
                            :on-click (lambda (button)
                                        (declare (ignore button))
                                        (set-text label
                                                  (format nil
                                                          &quot;~d click~:p&quot;
                                                          (incf n)))))))
&lt;/pre&gt;


&lt;p&gt;
Obviously, this isn't a very sophisticated approach, but it's a
start. It requires subclassing each UIControl or UIView to add the
vars to store the Lisp callbacks. I'm sure there's ample room for
abstracting or automating some of this boilerplate Objective C code.
&lt;/p&gt;</description></item></channel></rss>