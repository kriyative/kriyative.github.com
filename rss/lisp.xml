<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<rss version="2.0"><channel><title>lisp posts from kriyative</title><link>http://kriyative.github.com</link><description></description><item><title> clojure, emacs, and docs redux</title><link>http://kriyative.github.com/2013/03/02/clojure-emacs-docs-redux/</link><description>&lt;p&gt;
A while back I&apos;d &lt;a href=&quot;http:/2009/06/21/clojure-emacs-and-javadocs/&quot;&gt;written&lt;/a&gt; about looking up Javadocs from Clojure mode
buffers. I got some good feedback on that post, so I thought I&apos;d try
and expand on that and see if I could integrate other Clojure
documentation sources into a similar workflow.
&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
  &lt;a href=&quot;/assets/2013/03/02/w3m-javadoc.jpg&quot;&gt;
    &lt;img src=&quot;/assets/2013/03/02/w3m-javadoc.jpg&quot; width=&quot;400&quot;/&gt;
  &lt;/a&gt;
  &lt;h1&gt;view javadocs in emacs/w3m (click to view full size)&lt;/h1&gt;
&lt;/div&gt;

&lt;p&gt;
Looking up Clojure doc strings within Emacs is really easy. In any
Clojure code buffer, you can place your cursor at a symbol and use
&lt;code&gt;C-c C-d d&lt;/code&gt; or &lt;code&gt;M-x slime-describe-symbol&lt;/code&gt; to bring up the function or
var doc string.
&lt;/p&gt;

&lt;p&gt;
Previously, I&apos;d made a &lt;code&gt;slime-javadoc&lt;/code&gt; command that could be
configured to search external Javadoc sources only. However, that
mechanism could be applied more generally to more sources.
&lt;/p&gt;

&lt;p&gt;
The new command &lt;code&gt;M-x clojuredocs&lt;/code&gt;, can show either Javadocs for Java
classes, or goes to the excellent &lt;a href=&quot;http://clojuredocs.org&quot;&gt;clojuredocs.org&lt;/a&gt; site for
documentation specific to &lt;code&gt;clojure.core&lt;/code&gt; and a few other namespaces
(such as &lt;code&gt;ring&lt;/code&gt;), or eventually fallsback to a simple Google search.
&lt;/p&gt;

&lt;p&gt;
So, after connecting to a Clojure instance (via &lt;code&gt;clojure-jack-in&lt;/code&gt; or
&lt;code&gt;slime-connect&lt;/code&gt;), I can invoke &lt;code&gt;M-x clojuredocs&lt;/code&gt; on any symbol and get
back some relevant documentation or at the least som helpful pointers
from Google.
&lt;/p&gt;

&lt;p&gt;
I&apos;ve committed an initial version of the Emacs Lisp code into the
following github repo:
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;http://github.com/kriyative/clojure-emacs-hacks&quot;&gt;http://github.com/kriyative/clojure-emacs-hacks&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Feedback and bug reports are most welcome.
&lt;/p&gt;
</description></item><item><title> New Site</title><link>http://kriyative.github.com/2013/02/20/new-site/</link><description>&lt;p&gt;
This is my shiny new site hosted on github.com. I used to previously
blog at &lt;a href=&quot;http://funcall.posterous.com&quot;&gt;funcall.posterous.com&lt;/a&gt; and &lt;a href=&quot;http://cynojure.posterous.com&quot;&gt;cynojure.posterous.com&lt;/a&gt;, but I think
&lt;a href=&quot;http://github.com&quot;&gt;github&lt;/a&gt; may be a more natural fit for my edit and publish workflow.
After all, most of my professional and hobbyist programming work lives
here, so why not my blog.
&lt;/p&gt;

&lt;p&gt;
Incidentally, I&apos;m using &lt;a href=&quot;http://orgmode.org/&quot;&gt;org-mode&lt;/a&gt; in &lt;a href=&quot;http://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt; to author the posts and a
modified version of the &lt;a href=&quot;http://nakkaya.com/static.html&quot;&gt;static&lt;/a&gt; blog generation tool to generate the
HTML and RSS.
&lt;/p&gt;
</description></item><item><title>ECL for iOS update for ECL-11.1.1, Xocde 4, and SDK 4.3</title><link>http://kriyative.github.com/2011/03/26/ecl-for-ios-updated/</link><description>&lt;p&gt;
I&apos;ve committed a new branch of ECL for iOS, which now requires
ECL-11.1.1 (latest stable), and produces functioning device binaries
for armv6 and armv7 architectures using Xcode 4 and SDK 4.3. This
release has been tested on iPhone and iPad devices running iOS 4.3.1.
&lt;/p&gt;

&lt;p&gt;
Please refer to the updated README for further details.
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://github.com/kriyative/ecl-iphone-builder/tree/elf&quot;&gt;https://github.com/kriyative/ecl-iphone-builder/tree/elf&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Please note that the earlier release branch `dragon&apos; has also been
updated to work with Xcode 4, and SDK 4.3. However, it continues to be
based on ECL-10.4.1.
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://github.com/kriyative/ecl-iphone-builder/tree/dragon&quot;&gt;https://github.com/kriyative/ecl-iphone-builder/tree/dragon&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Many thanks to &lt;a href=&quot;http://mclide.in-progress.com/&quot;&gt;Terje Norderhaug&lt;/a&gt; for his help with this update.
&lt;/p&gt;
</description></item><item><title>clojurejs -- a Clojure (subset) to Javascript translator</title><link>http://kriyative.github.com/2011/01/10/clojurejs-announcement/</link><description>&lt;p&gt;
I&apos;m releasing &lt;a href=&quot;http://github.com/kriyative/clojurejs&quot;&gt;clojurejs&lt;/a&gt; &amp;#x2013; a Clojure library for translating a Clojure
subset language to Javascript. The code is on github reachable at the
following link:
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;http://github.com/kriyative/clojurejs&quot;&gt;http://github.com/kriyative/clojurejs&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
clojurejs is something I&apos;ve been working on for a few weeks as part of
a larger web app in Clojure. The code&apos;s a bit crufty (reflects my
incremental discovery of the inconsistencies in Javascript), but
functional and I wanted put something out there for people to check
out. I welcome bug reports and feedback. It&apos;s been useful for my
specific needs, and I&apos;d be happy if it&apos;s even marginally useful to
others.
&lt;/p&gt;

&lt;p&gt;
I realize there are a number of other efforts to compile/translate
Clojure (or other Lisp subset) to Javascript, but nothing quite fit my
requirements, which prompted me to build clojurejs. Some useful
aspects of clojurejs are:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Consistent scoping in let and loop/recur forms
&lt;/li&gt;
&lt;li&gt;Macros with defmacro
&lt;/li&gt;
&lt;li&gt;Implicit return from all forms
&lt;/li&gt;
&lt;li&gt;loop/recur translates to Javascript for loops
&lt;/li&gt;
&lt;li&gt;Translates Clojure vectors, strings, keywords, symbols and maps to
Javascript equivalents
&lt;/li&gt;
&lt;li&gt;dot form access to methods and properties
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Here&apos;s an example from the README:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
(js
 (defn join [arr delim]
   (loop [str (get arr 0)
          i 1]
     (if (&amp;lt; i (length arr))
       (recur (+ str delim (get arr i))
              (+ i 1))
       str))))
&lt;/pre&gt;

&lt;p&gt;
translates to the following Javascript:
&lt;/p&gt;


&lt;pre class=&quot;example&quot;&gt;
join = function(arr, delim) {
    return (function () {
        for (var str = arr[0],i = 1; true;) {
            if ((i &amp;lt; arr.length)) {
                str = (str + delim + arr[i]);
                i = (i + 1);
                continue;
            } else {
                return str;
            } break;
        }
    })();
}
&lt;/pre&gt;

&lt;p&gt;
Documentation is regrettably scarce, but there are more details in the
README file, boot.cljs, and the unit tests. I hope to add more
documentation and examples in the next few weeks. Stay tuned.
&lt;/p&gt;
</description></item><item><title>Displaying a daily Org-mode agenda reminder in Emacs</title><link>http://kriyative.github.com/2010/03/23/daily-org-agenda-reminder/</link><description>&lt;p&gt;
Here&apos;s a simple hack to get an Org-mode agenda view to popup in an
Emacs buffer, daily at a specified time.
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
(defvar daily-agenda-timer (parse-relative-time &quot;9:00 am&quot;))
;; (decode-time daily-agenda-timer)
 
(defun show-daily-agenda ()
  (unless (time-less-p (current-time) daily-agenda-timer)
    (setq daily-agenda-timer (time-add daily-agenda-timer
                                       (seconds-to-time 86400)))
    (org-agenda-list)))
 
(add-hook &apos;display-time-hook &apos;show-daily-agenda)
(display-time)
&lt;/pre&gt;

&lt;p&gt;
The &lt;code&gt;parse-relative-time&lt;/code&gt; function helps in initializing the
&lt;code&gt;daily-agenda-timer&lt;/code&gt; using a human readable string.
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
(defun parse-relative-time (time-str)
  (destructuring-bind (sec min hour day month year dow dst zone)
      (parse-time-string time-str)
    (destructuring-bind (sec1 min1 hour1 day1 month1 year1 dow1 dst1 zone1)
        (decode-time)
      (encode-time (or sec sec1)
                   (or min min1)
                   (or hour hour1)
                   (or day day1)
                   (or month month1)
                   (or year year1)
                   (or zone zone1)))))
&lt;/pre&gt;
</description></item><item><title>my other lisp blog</title><link>http://kriyative.github.com/2010/01/29/my-other-lisp-blog/</link><description>&lt;p&gt;
I haven&apos;t been working in Clojure for a couple of months now, hence
the absence of new posts here.
&lt;/p&gt;

&lt;p&gt;
However, I have been posting some updates on my other Lisp related
blog (yes, I have two Lisp blogs :) &amp;#x2026; about my work in porting the
Embedded Common Lisp system to the iPhone. Sound interesting, check it
out at:
&lt;/p&gt;
</description></item><item><title>A lightweight `bind&apos; macro</title><link>http://kriyative.github.com/2009/12/29/a-lightweight-bind-macro/</link><description>&lt;p&gt;
In my recent work I found myself writing a lot of code that looked
like the following:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
(destructuring-bind (x y)
    point
  (destructuring-bind (x1 y1 w h)
      frame
    (let ((x2 (+ x1 w))
          (y2 (+ y1 h)))
      (and (&amp;gt;= x x1) (&amp;lt;= x x2) (&amp;gt;= y y1) (&amp;lt;= y y2)))))
&lt;/pre&gt;

&lt;p&gt;
The above example is a bit contrived, for effect, but hopefully
conveys the general idea.
&lt;/p&gt;

&lt;p&gt;
What I wanted was a Clojure style `let&apos; which could destructure
inline. There was one Common Lisp implementation
(&lt;a href=&quot;http://common-lisp.net/project/metabang-bind/&quot;&gt;http://common-lisp.net/project/metabang-bind/&lt;/a&gt;), which had some nice
features, but it was bit much for my needs. So I came up with my own
lightweight &lt;code&gt;bind&lt;/code&gt; macro (see below), which lets me rewrite the above
example as:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
(bind (((x y) point)
       ((x1 y1 w h) frame)
       (x2 (+ x1 w))
       (y2 (+ y1 h)))
  (and (&amp;gt;= x x1) (&amp;lt;= x x2) (&amp;gt;= y y1) (&amp;lt;= y y2)))
&lt;/pre&gt;

&lt;p&gt;
Way better, IMHO.
&lt;/p&gt;

&lt;p&gt;
Oh, here&apos;s the `bind&apos; macro in its entirety:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
(defmacro bind (clauses &amp;amp;body body)
  &quot;This macro combines the behaviour of the forms `let*&apos;, `destructuring-bind&apos;,
and `multiple-value-bind&apos;, permitting the following style of binding form:
 
  (bind (((:values m n) (values 10 20))
         ((a b &amp;amp;key (c 10)) &apos;(1 2))
         (x 5))
    (+ x a b c m n))
  =&amp;gt; 48
 
This is a more limited and lightweight implementation of some ideas from
metabang-bind (http://common-lisp.net/project/metabang-bind/).&quot;
  (cond
    ((null clauses) `(progn ,@body))
    ((and (listp (caar clauses)) (eq (caaar clauses) :values))
     `(multiple-value-bind ,(cdaar clauses)
          ,@(cdar clauses)
        (bind ,(cdr clauses) ,@body)))
    ((listp (caar clauses))
     `(destructuring-bind ,(caar clauses)
          ,@(cdar clauses)
        (bind ,(cdr clauses) ,@body)))
    (t
     `(let (,(car clauses))
        (bind ,(cdr clauses) ,@body)))))
&lt;/pre&gt;
</description></item><item><title>ECL on iPhone (redux)</title><link>http://kriyative.github.com/2009/12/12/ecl-on-iphone-redux/</link><description>&lt;p&gt;
A while ago Red Daly &lt;a href=&quot;http://lambdajive.wordpress.com/2009/03/27/common-lisp-on-iphone-ecl-comes-through-at-last/&quot;&gt;posted&lt;/a&gt; about some great initial work he had done
in porting ECL to the iPhone. I contacted him, and worked to clean up
some of the external dependencies, and got ECL to run on the simulator
and device (with SLIME). I put together an updated Git repo with all
my changes, and finally got around to posting about it.
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;http://github.com/kriyative/ecl-iphone-builder&quot;&gt;http://github.com/kriyative/ecl-iphone-builder&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Hopefully, this will be of use to others.
&lt;/p&gt;
</description></item><item><title>welcome to cynojure</title><link>http://kriyative.github.com/2009/05/06/welcome/</link><description>&lt;p&gt;
Welcome to cynojure &amp;#x2013; a blog about &lt;a href=&quot;http://clojure.org/&quot;&gt;clojure&lt;/a&gt; &amp;#x2013; a modern &lt;a href=&quot;http://en.wikipedia.org/wiki/Lisp_(programming_language)&quot;&gt;Lisp&lt;/a&gt;
implementation.
&lt;/p&gt;

&lt;p&gt;
I&apos;ve been hacking Lisp, professionally and as a hobbyist, for about
eighteen years now. Starting with &lt;a href=&quot;http://en.wikipedia.org/wiki/Emacs_Lisp&quot;&gt;elisp&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Scheme_(programming_language)&quot;&gt;Scheme&lt;/a&gt;, and then &lt;a href=&quot;http://en.wikipedia.org/wiki/Common_Lisp&quot;&gt;Common
Lisp&lt;/a&gt; for the past eight years. At the risk of importing my CV into
this post, I&apos;ve worked in &lt;a href=&quot;http://en.wikipedia.org/wiki/Smalltalk&quot;&gt;Smalltalk&lt;/a&gt;, Objective-C, Java; even some
Cadence SKILL. More recently, I got to work on a reasonably extensive
project in &lt;a href=&quot;http://en.wikipedia.org/wiki/Erlang_(programming_language)&quot;&gt;Erlang&lt;/a&gt;. Before you write me off as a mono-lingual snob, let
me assure you I&apos;ve had a fair amount of experience with C and its
derivative family of languages as well. I just happen to be a bigger
fan of Lisp, and functional programming in general; which leads me to
clojure.
&lt;/p&gt;

&lt;p&gt;
I first heard about clojure a year back, and was very impressed with
the design motivations of its creator, Rich Hickey. A pure functional
Lisp with immutable data structures, STM, actors &amp;#x2026; and, efficient
Java interop! Sounded too good, so I had to check it out. Since then,
I&apos;ve been following the development of the language and its libraries,
read the &lt;a href=&quot;http://www.pragprog.com/titles/shcloj/programming-clojure&quot;&gt;Programming Clojure&lt;/a&gt; book, and played with it enough to be
somewhat productive.
&lt;/p&gt;

&lt;p&gt;
And, this week (May 4, 2009) Rich Hickey formally &lt;a href=&quot;http://groups.google.com/group/clojure/msg/bcbdad671327d2f5&quot;&gt;announced&lt;/a&gt; the
release of Clojure 1.0, which is great news. Congratulations to Rich
and all the other contributors. To mark this major milestone in
Clojure&apos;s history, and to add my own little bit to its growth, I
decided to blog about my experiences with clojure as I learn and apply
it. Hopefully, my experiences will be of some use or entertainment to
others :)
&lt;/p&gt;

&lt;p&gt;
Happy hacking.
&lt;/p&gt;

&lt;p&gt;
PS: About the name - cynojure is a play (in keeping with clojure
tradition) on the word cynosure, which according to &lt;a href=&quot;http://wordnetweb.princeton.edu/perl/webwn?s=cynosure&quot;&gt;WordNet&lt;/a&gt; has the
following meanings:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
cynosure
&lt;/p&gt;

&lt;p&gt;
something that provides guidance (as Polaris guides mariners)
&lt;/p&gt;

&lt;p&gt;
something that strongly attracts attention and admiration
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Perhaps a bit grandiose, but I thought it was suitable.
&lt;/p&gt;
</description></item></channel></rss>